import React, { ReactNode } from 'react';
import { GetStaticProps } from 'next';
import Head from 'next/head'
import Image from 'next/image'
import { GraphQLClient, gql } from 'graphql-request';
import { documentToReactComponents, Options } from '@contentful/rich-text-react-renderer';
import { Document, BLOCKS } from '@contentful/rich-text-types';
import dayjs from 'dayjs';
import advancedFormat from 'dayjs/plugin/advancedFormat';

import styles from '../styles/Home.module.css'

dayjs.extend(advancedFormat);

interface Props {
  assetCollection: {
    items: {
      sys: { id: string; };
      url: string;
      title: string;
    }[];
  };
  blogPostCollection: {
    items: {
      title: string;
      publishedAt: Date;
      content: { json: Document }
    }[];
  };
}

export const getStaticProps: GetStaticProps<Props> = async () => {
  const gqlClient = new GraphQLClient(`https://graphql.contentful.com/content/v1/spaces/${
    process.env.CONTENTFUL_SPACE_ID
  }`, {
    headers: {
      Authorization: `Bearer ${process.env.CONTENTFUL_ACCESS_TOKEN}`,
    }
  });

  const postsQuery = gql`
    {
      blogPostCollection {
        items {
          title
          content {
            json
          }
          publishedAt
        }
      }
      assetCollection {
        items {
          sys {
            id
          }
          url
          title
        }
      }
    }
  `;

  let assetCollection: Props['assetCollection'];
  let blogPostCollection: Props['blogPostCollection'];
  try {
    ({
      assetCollection,
      blogPostCollection,
    } = await gqlClient.request(postsQuery));
  } catch (error) {
    console.error(error);
    return {
      props: {
        assetCollection: { items: [] },
        blogPostCollection: { items: [] },
      }
    }
  }

  return {
    props: {
      assetCollection,
      blogPostCollection,
    }
  }
};

export default function Home({ assetCollection, blogPostCollection }: Props) {
  const displayOptions: Options = {
    renderNode: {
      [BLOCKS.EMBEDDED_ASSET]: (node): ReactNode => {
        const asset = assetCollection.items.find(({ sys: { id } }) => id === node.data.target.sys.id);
        if (!asset) return null;

        return <img src={asset.url} alt={asset.title} />;
      }
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {blogPostCollection.items.map(({ title, publishedAt, content }) => (
          <div key={title}>
            <h2>{title}</h2>
            <p>{dayjs(publishedAt).format('dddd, MMMM Do YYYY, h:mm:ss a')}</p>
            {documentToReactComponents(content.json, displayOptions)}
          </div>
        ))}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
